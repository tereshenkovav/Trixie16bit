' loader types

TYPE Sprite
  w AS INTEGER
  h AS INTEGER
  BufPos AS LONG
END TYPE

TYPE Animation
  w AS INTEGER
  h AS INTEGER
  BufPos AS LONG
  FrameCount AS INTEGER
  TekFrame AS INTEGER
  FPS AS INTEGER
  Ticks AS INTEGER
  BytesPerFrame AS INTEGER
END TYPE

TYPE ColorRGB
  r AS INTEGER
  g AS INTEGER
  b AS INTEGER
END TYPE

' wrapper for asm proc
DECLARE SUB setUpBuffer (buf() AS INTEGER, w AS INTEGER, h AS INTEGER, c AS INTEGER)
DECLARE SUB copyBuffer (bufsrc() AS INTEGER, bufdst() AS INTEGER, w AS INTEGER, h AS INTEGER)
DECLARE SUB drawLineHorz (buf() AS INTEGER, X1 AS INTEGER, X2 AS INTEGER, y AS INTEGER, c AS INTEGER)
DECLARE SUB drawLineVert (buf() AS INTEGER, x AS INTEGER, Y1 AS INTEGER, Y2 AS INTEGER, c AS INTEGER)
DECLARE SUB drawSprite (buf() AS INTEGER, Sprite() AS INTEGER, SpritePos AS LONG, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawSpriteTransp (buf() AS INTEGER, Sprite() AS INTEGER, SpritePos AS LONG, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawAnimation (buf() AS INTEGER, Sprite() AS INTEGER, Anim AS Animation, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawAnimationTransp (buf() AS INTEGER, Sprite() AS INTEGER, Anim AS Animation, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawSpriteMirror (buf() AS INTEGER, Sprite() AS INTEGER, SpritePos AS LONG, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawSpriteTranspMirror (buf() AS INTEGER, Sprite() AS INTEGER, SpritePos AS LONG, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawAnimationMirror (buf() AS INTEGER, Sprite() AS INTEGER, Anim AS Animation, x AS INTEGER, y AS INTEGER)
DECLARE SUB drawAnimationTranspMirror (buf() AS INTEGER, Sprite() AS INTEGER, Anim AS Animation, x AS INTEGER, y AS INTEGER)
DECLARE SUB getMouse (MouseX AS INTEGER, MouseY AS INTEGER, ButLeft AS INTEGER, ButRight AS INTEGER)
DECLARE SUB setMouseWindow (X1 AS INTEGER, Y1 AS INTEGER, X2 AS INTEGER, Y2 AS INTEGER)
DECLARE SUB fillRect(buf() AS INTEGER, x1 as integer, y1 as INTEGER, w AS INTEGER, h AS INTEGER, c AS INTEGER)
DECLARE SUB setPalette(bufpal() AS INTEGER, start AS INTEGER, count AS INTEGER)

' asm proc
DECLARE SUB setUpBufferAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, BYVAL w AS INTEGER, BYVAL h AS INTEGER, BYVAL c AS INTEGER)
DECLARE SUB copyBufferAsm (BufSrcAddr AS INTEGER, BufSrcSeg AS INTEGER, BufDstAddr AS INTEGER, BufDstSeg AS INTEGER, BYVAL w AS INTEGER, BYVAL h AS INTEGER)
DECLARE SUB drawLineHorzAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, BYVAL X1 AS INTEGER, BYVAL X2 AS INTEGER, BYVAL y AS INTEGER, BYVAL c AS INTEGER)
DECLARE SUB drawLineVertAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, BYVAL x AS INTEGER, BYVAL Y1 AS INTEGER, BYVAL Y2 AS INTEGER, BYVAL c AS INTEGER)
DECLARE SUB drawSpriteAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, SpriteAddr AS INTEGER, SpriteSeg AS INTEGER, BYVAL x AS INTEGER, BYVAL y AS INTEGER, BYVAL transp AS INTEGER)
DECLARE SUB drawSpriteMirrorAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, SpriteAddr AS INTEGER, SpriteSeg AS INTEGER, BYVAL x AS INTEGER, BYVAL y AS INTEGER, BYVAL transp AS INTEGER)
DECLARE SUB getMouseAsm (XAddr AS INTEGER, XSeg AS INTEGER)
DECLARE SUB setMouseWindowAsm (BYVAL X1 AS INTEGER, BYVAL Y1 AS INTEGER, BYVAL X2 AS INTEGER, BYVAL Y2 AS INTEGER)
DECLARE SUB drawCharAsm (BufAddr AS INTEGER, BufSeg AS INTEGER, FontAddr AS INTEGER, FontSeg AS INTEGER, BYVAL x AS INTEGER, BYVAL y AS INTEGER, BYVAL char AS INTEGER, BYVAL colr AS INTEGER)
DECLARE SUB fillRectAsm(BufAddr AS INTEGER, BufSeg AS INTEGER, BYVAL X1 AS INTEGER, BYVAL Y1 AS INTEGER, BYVAL W AS INTEGER, BYVAL H AS INTEGER, BYVAL C AS INTEGER)
DECLARE SUB setPaletteAsm (BufPalAddr AS INTEGER, BufPalSeg AS INTEGER, BYVAL start AS INTEGER, BYVAL count AS INTEGER)
DECLARE FUNCTION isFileExistsAsm% (FileNameAddr AS INTEGER, FileNameSeg AS INTEGER)

' loader proc

DECLARE SUB ResetSpriteLoader (ReservedColorCount AS INTEGER)
DECLARE SUB LoadTranspGrayedSpriteInBuf (buf() AS INTEGER, Sprite AS Sprite, FileName AS STRING, TranspX AS INTEGER, TranspY AS INTEGER)
DECLARE SUB LoadTranspSpriteInBuf (buf() AS INTEGER, Sprite AS Sprite, FileName AS STRING, TranspX AS INTEGER, TranspY AS INTEGER)
DECLARE SUB LoadSpriteInBuf (buf() AS INTEGER, Sprite AS Sprite, FileName AS STRING)
DECLARE SUB LoadTranspAnimationInBuf (buf() AS INTEGER, Anim AS Animation, FileName AS STRING, FrameCount AS INTEGER, FPS AS INTEGER, TranspX AS INTEGER, TranspY AS INTEGER)
DECLARE SUB LoadAnimationInBuf (buf() AS INTEGER, Sprite AS Animation, FileName AS STRING, FrameCount AS INTEGER, FPS AS INTEGER)
DECLARE SUB internalLoadAllInBuf (buf() AS INTEGER, Sprite AS Sprite, Anim AS Animation, mode AS INTEGER, FileName AS STRING, FrameCount AS INTEGER, FPS AS INTEGER, TranspX AS INTEGER, TranspY AS INTEGER, SetGray AS INTEGER)
DECLARE SUB directLoadPicToBuf (buf() AS INTEGER, FileName AS STRING, usedpal() AS ColorRGB, usedpalcount AS INTEGER)
DECLARE SUB SetNewPalette ()
DECLARE SUB loadFont (buf() AS INTEGER, FileName AS STRING)
DECLARE SUB drawString (buf() AS INTEGER, font() AS INTEGER, x AS INTEGER, y AS INTEGER, text AS STRING, colr AS INTEGER)
DECLARE SUB updateAnimation (Anim AS Animation)
DECLARE FUNCTION getLoaderReport$ ()
DECLARE FUNCTION getBufferReport$ (buf() AS INTEGER, MaxSize AS LONG)

' helper proc

DECLARE SUB enableDebug ()
DECLARE SUB startFPSCounter ()
DECLARE FUNCTION getFPS% ()
DECLARE FUNCTION RGB2Pal& (rgb AS ColorRGB)
DECLARE SUB SetBrightRGB (rgb AS ColorRGB, bright AS SINGLE)
DECLARE FUNCTION isFileExists% (filename AS STRING)
